%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 以下代码用于使用yulewalk函数设计递归数字滤波器
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 参数oder用于设定滤波器的阶数
oder=10;
% 参数f用于设定滤波器的频率间隔点
f=0:0.1:1;
% 参数m用于设定滤波器在各个频率间隔点上的幅值
m=[0 0 1 1 0 0 1 1 0 0 0];
% 利用yulewalk函数来设计一个递归数字滤波器，其中参数oder为滤波器的阶数；参数f用于设定滤波器的频率间隔点；参数m用于设定滤波器在各个频率间隔点上的幅值
[b,a]=yulewalk(oder,f,m);
% 使用freqz函数查看滤波器的频率响应，其中参数a,b为滤波器的系数;参数128为滤波器的采样频率
[h,w]=freqz(b,a,128);

%%%%%%%%%%%%%%% 以下代码用于绘制递归数字滤波器的频率响应曲线 %%%%%%%%%%%%%%%
% 设置绘制图形的坐标轴参数
axes('position',[0.2 0.2 0.4 0.4]);
% 分别绘制两条不同的图形，用蓝色’-’绘制理想滤波器的图形，参数f,m用于指定理想滤波器的特性参数；用红色’+’绘制设计滤波器的频率曲线，其中参数w/pi为横坐标的点，参数abs(h)为在该间隔点处的数值
plot(f,m,'b-',w/pi,abs(h),'r+');
% 为图形的x坐标添加标注'frequency(pi)'
xlabel('frequency(pi)');
% 为图形的y坐标轴添加标注'magnitude'
ylabel('magnitude')
% 为图形曲线添加标题'direct IIR design-yulewalk'
title('direct IIR design-yulewalk');
为不同的图形曲线添加标注
legend('理想图形','实际图形')
% 生成网格图
grid
% 得到如图11-12所示的图形
